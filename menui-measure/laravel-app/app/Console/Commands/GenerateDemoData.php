<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use App\Models\Task;
use App\Models\Photo;
use App\Models\NotificationLog;

class GenerateDemoData extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'demo:generate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'GÃ©nÃ©rer des donnÃ©es de dÃ©monstration pour le dashboard';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('CrÃ©ation de donnÃ©es de dÃ©monstration...');

        // RÃ©cupÃ©rer le premier utilisateur
        $user = User::first();
        if (!$user) {
            $this->error('Aucun utilisateur trouvÃ©. Veuillez crÃ©er un utilisateur d\'abord.');
            return 1;
        }

        // RÃ©cupÃ©rer ou crÃ©er quelques tÃ¢ches
        $task = $user->tasks()->first();
        if (!$task) {
            $task = $user->tasks()->create([
                'title' => 'TÃ¢che de dÃ©monstration',
                'description' => 'Une tÃ¢che crÃ©Ã©e pour tester le dashboard',
                'status' => 'en_execution',
            ]);
            $this->info("TÃ¢che crÃ©Ã©e: {$task->title}");
        }

        // CrÃ©er quelques notifications de test
        $notifications = [
            [
                'type' => NotificationLog::TYPE_PUSH,
                'payload' => [
                    'subject' => 'Photo traitÃ©e avec succÃ¨s',
                    'message' => 'Marqueur A4 dÃ©tectÃ© avec 3 mesures suggÃ©rÃ©es.',
                ],
                'status' => NotificationLog::STATUS_SENT,
            ],
            [
                'type' => NotificationLog::TYPE_EMAIL,
                'payload' => [
                    'subject' => 'Nouvelle photo uploadÃ©e',
                    'message' => 'Une photo a Ã©tÃ© uploadÃ©e par un invitÃ© et est en cours de traitement.',
                ],
                'status' => NotificationLog::STATUS_SENT,
            ],
            [
                'type' => NotificationLog::TYPE_PUSH,
                'payload' => [
                    'subject' => 'Ã‰chec de traitement',
                    'message' => 'Impossible de dÃ©tecter le marqueur A4 sur la photo.',
                ],
                'status' => NotificationLog::STATUS_ERROR,
            ],
            [
                'type' => NotificationLog::TYPE_PUSH,
                'payload' => [
                    'subject' => 'Traitement terminÃ©',
                    'message' => 'Toutes les photos de la tÃ¢che ont Ã©tÃ© traitÃ©es avec succÃ¨s.',
                ],
                'status' => NotificationLog::STATUS_SENT,
            ],
        ];

        foreach ($notifications as $notifData) {
            NotificationLog::create([
                'task_id' => $task->id,
                'type' => $notifData['type'],
                'payload' => $notifData['payload'],
                'sent_at' => now()->subMinutes(rand(1, 60)),
                'status' => $notifData['status'],
            ]);
        }

        $this->info('âœ… ' . count($notifications) . ' notifications crÃ©Ã©es avec succÃ¨s!');

        // CrÃ©er quelques photos de test si nÃ©cessaire
        $photosCount = $task->photos()->count();
        if ($photosCount < 3) {
            for ($i = $photosCount; $i < 3; $i++) {
                Photo::create([
                    'task_id' => $task->id,
                    'path' => "photos/{$task->id}/demo_photo_{$i}.jpg",
                    'width_px' => 1920,
                    'height_px' => 1080,
                    'processed' => rand(0, 1) === 1,
                    'metadata' => [
                        'original_name' => "demo_photo_{$i}.jpg",
                        'mime_type' => 'image/jpeg',
                        'size' => rand(500000, 2000000),
                        'uploaded_by' => 'guest',
                        'uploaded_at' => now()->subHours(rand(1, 24))->toDateTimeString(),
                    ],
                ]);
            }
            $this->info('âœ… Photos de dÃ©monstration crÃ©Ã©es!');
        }

        // CrÃ©er quelques tÃ¢ches supplÃ©mentaires pour les statistiques
        if ($user->tasks()->count() < 5) {
            $statuses = ['nouveau', 'en_attente', 'en_execution', 'cloture'];
            for ($i = 1; $i < 5; $i++) {
                $user->tasks()->create([
                    'title' => "TÃ¢che de test #{$i}",
                    'description' => "Description de la tÃ¢che de test numÃ©ro {$i}",
                    'status' => $statuses[array_rand($statuses)],
                ]);
            }
            $this->info('âœ… TÃ¢ches de test crÃ©Ã©es pour les statistiques!');
        }

        $this->info('ðŸŽ‰ DonnÃ©es de dÃ©monstration crÃ©Ã©es avec succÃ¨s!');
        $this->info('Vous pouvez maintenant tester le dashboard Ã  l\'adresse: /dashboard');

        return 0;
    }
}
